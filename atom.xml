<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>gethin&#39;s Notes</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://notes.gethin.cn/"/>
  <updated>2021-05-08T00:54:41.257Z</updated>
  <id>https://notes.gethin.cn/</id>
  
  <author>
    <name>gethin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>和我一起走近 git</title>
    <link href="https://notes.gethin.cn/2019/01/18/git/"/>
    <id>https://notes.gethin.cn/2019/01/18/git/</id>
    <published>2019-01-18T16:07:57.000Z</published>
    <updated>2021-05-08T00:54:41.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-设置"><a href="#git-设置" class="headerlink" title="git 设置"></a><code>git</code> 设置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置用户名和邮箱</span></span><br><span class="line">$ git config --global user.name <span class="string">"gethin"</span></span><br><span class="line">$ git config --global user.email <span class="string">"gethin.yan@gmail.com"</span></span><br><span class="line"><span class="comment"># Unix/Mac 用户</span></span><br><span class="line">$ git config --global core.autocrlf input</span><br><span class="line">$ git config --global core.safecrlf <span class="literal">true</span></span><br><span class="line"><span class="comment"># Windows 用户</span></span><br><span class="line">$ git config --global core.autocrlf <span class="literal">true</span></span><br><span class="line">$ git config --global core.safecrlf <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="关于-CRLF-和-LF"><a href="#关于-CRLF-和-LF" class="headerlink" title="关于 CRLF 和 LF"></a>关于 <code>CRLF</code> 和 <code>LF</code></h1><p><code>Linux/Mac OS</code> 以 <code>LF(\n)</code> 结尾，而 <code>Windows</code> 以 <code>CRLF(\r\n)</code> 结尾</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交时转换为 LF，检出时转换为 CRLF</span></span><br><span class="line">$ git config --global core.autocrlf <span class="literal">true</span></span><br><span class="line"><span class="comment"># 提交时转换为 LF，检出时不转换</span></span><br><span class="line">$ git config --global core.autocrlf input</span><br><span class="line"><span class="comment"># 提交检出均不转换</span></span><br><span class="line">$ git config --global core.autocrlf <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>safecrlf 选项是针对提交时的配置，当有混用的情况发生的时候 git 应该给出的一些表现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拒绝提交包含混合换行符的文件</span></span><br><span class="line">git config --global core.safecrlf <span class="literal">true</span></span><br><span class="line"><span class="comment"># 允许提交包含混合换行符的文件</span></span><br><span class="line">git config --global core.safecrlf <span class="literal">false</span></span><br><span class="line"><span class="comment"># 提交包含混合换行符的文件时给出警告</span></span><br><span class="line">git config --global core.safecrlf warn</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h1><p>添加下列内容到你的 <code>$HOME</code> 目录的 <code>.gitconfig</code> 文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[alias]</span><br><span class="line">  co = checkout</span><br><span class="line">  ci = commit</span><br><span class="line">  st = status</span><br><span class="line">  br = branch</span><br><span class="line">  hist = log --pretty=format:&apos;%h %ad | %s%d [%an]&apos; --graph --date=short</span><br><span class="line">  type = cat-file -t</span><br><span class="line">  dump = cat-file -p</span><br></pre></td></tr></table></figure><h1 id="GitHub-SSH-Keys"><a href="#GitHub-SSH-Keys" class="headerlink" title="GitHub SSH Keys"></a>GitHub SSH Keys</h1><p>使用 SSH 协议，您可以连接和验证远程服务器和服务。 使用 SSH 密钥，您可以连接到 GitHub，而无需在每次访问时提供用户名或密码</p><h2 id="ssh-keygen-生成秘钥"><a href="#ssh-keygen-生成秘钥" class="headerlink" title="ssh-keygen 生成秘钥"></a><code>ssh-keygen</code> 生成秘钥</h2><p><code>ssh-keygen</code> 命令用于为 <code>ssh</code> 生成、管理和转换认证秘钥，它支持 <code>RSA</code> 和 <code>DSA</code> 两种认证秘钥，秘钥文件放在 <code>~/.ssh</code> 文件夹中(~是用户根目录)，运行下面命令生成秘钥，密码为空(只需要按回车)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -t 指定类型，-C 添加注释</span></span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">"gethin.yan@gmail.com"</span></span><br></pre></td></tr></table></figure><h2 id="公钥放到-GitHub"><a href="#公钥放到-GitHub" class="headerlink" title="公钥放到 GitHub"></a>公钥放到 <code>GitHub</code></h2><p>生成秘钥之后进入 <code>~/.ssh</code> 文件夹下，复制 <code>id_rsa.pub</code> 文件的所有内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">打开 GitHub -&gt; settings -&gt; SSH and GPG keys -&gt; New SSH key -&gt; 将复制的内容添加进去</span><br></pre></td></tr></table></figure><h2 id="测试是否设置成功"><a href="#测试是否设置成功" class="headerlink" title="测试是否设置成功"></a>测试是否设置成功</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh git@github.com</span><br><span class="line">PTY allocation request failed on channel 0</span><br><span class="line">Hi gethinyan! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class="line"><span class="string">Connection to github.com closed.</span></span><br></pre></td></tr></table></figure><h1 id="git-基础概念"><a href="#git-基础概念" class="headerlink" title="git 基础概念"></a><code>git</code> 基础概念</h1><ul><li><code>workspace</code> （工作区）</li><li><code>stage</code> （暂存区）</li><li><code>repository</code> （本地仓库）</li><li><code>remote</code> （远程仓库）</li></ul><h1 id="git-基本命令"><a href="#git-基本命令" class="headerlink" title="git 基本命令"></a><code>git</code> 基本命令</h1><p>因为习惯使用 git 图形化工具，所以很多时候使用 git 命令的时候需要去查，此处记录常用的基本命令方便随时查看</p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><h2 id="检出仓库"><a href="#检出仓库" class="headerlink" title="检出仓库"></a>检出仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> [<span class="built_in">local</span> repository | remote]</span><br></pre></td></tr></table></figure><h2 id="添加文件到暂存区"><a href="#添加文件到暂存区" class="headerlink" title="添加文件到暂存区"></a>添加文件到暂存区</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add [filename | . | -A | *]</span><br></pre></td></tr></table></figure><h2 id="查看工作目录状态"><a href="#查看工作目录状态" class="headerlink" title="查看工作目录状态"></a>查看工作目录状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stauts</span><br></pre></td></tr></table></figure><h3 id="比较差异"><a href="#比较差异" class="headerlink" title="比较差异"></a>比较差异</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff [filename]</span><br></pre></td></tr></table></figure><h2 id="提交到仓库"><a href="#提交到仓库" class="headerlink" title="提交到仓库"></a>提交到仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里 -am 不支持新建文件</span></span><br><span class="line">$ git commit [-m | -am]</span><br></pre></td></tr></table></figure><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加到暂存区的修改</span></span><br><span class="line">$ git reset HEAD filename</span><br><span class="line"><span class="comment"># 未添加到暂存区的修改</span></span><br><span class="line">$ git checkout -- filename</span><br></pre></td></tr></table></figure><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm filename</span><br></pre></td></tr></table></figure><h2 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git mv filename path</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch [-a | -r | -d | -D ]</span><br></pre></td></tr></table></figure><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout [-b] branch</span><br></pre></td></tr></table></figure><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git merge branch</span><br><span class="line">$ git rebase branch</span><br></pre></td></tr></table></figure><h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset [--soft | --mixed(default) | --hard] [HEAD~number | commit Id]</span><br><span class="line">$ git revert [HEAD~number | commit Id]</span><br></pre></td></tr></table></figure><h2 id="提交历史"><a href="#提交历史" class="headerlink" title="提交历史"></a>提交历史</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --pretty=format:<span class="string">'%h %ad | %s%d [%an]'</span> --graph --date=short</span><br></pre></td></tr></table></figure><h2 id="储藏-弹出修改"><a href="#储藏-弹出修改" class="headerlink" title="储藏/弹出修改"></a>储藏/弹出修改</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br></pre></td></tr></table></figure><h2 id="同步远端"><a href="#同步远端" class="headerlink" title="同步远端"></a>同步远端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch</span><br></pre></td></tr></table></figure><h2 id="同步远端并合并"><a href="#同步远端并合并" class="headerlink" title="同步远端并合并"></a>同步远端并合并</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull remote branch [<span class="built_in">local</span> branch]</span><br></pre></td></tr></table></figure><h2 id="同步到远端"><a href="#同步到远端" class="headerlink" title="同步到远端"></a>同步到远端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push remote branch</span><br></pre></td></tr></table></figure><h2 id="管理主机名"><a href="#管理主机名" class="headerlink" title="管理主机名"></a>管理主机名</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote [-v | add | rm | rename]</span><br></pre></td></tr></table></figure><h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global https.proxy <span class="string">'socks5://127.0.0.1:1086'</span></span><br><span class="line">$ git config --global http.proxy <span class="string">'socks5://127.0.0.1:8086'</span></span><br></pre></td></tr></table></figure><h2 id="取消代理"><a href="#取消代理" class="headerlink" title="取消代理"></a>取消代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global --<span class="built_in">unset</span> https.proxy</span><br><span class="line">$ git config --global --<span class="built_in">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h1 id="git-子模块"><a href="#git-子模块" class="headerlink" title="git 子模块"></a><code>git</code> 子模块</h1><h2 id="子模块初始化拉代码"><a href="#子模块初始化拉代码" class="headerlink" title="子模块初始化拉代码"></a>子模块初始化拉代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git submodule update --init</span><br></pre></td></tr></table></figure><h2 id="子模块拉远程代码"><a href="#子模块拉远程代码" class="headerlink" title="子模块拉远程代码"></a>子模块拉远程代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 也可以进入子模块的文件夹 git pull</span></span><br><span class="line">$ git submodule update --remote</span><br></pre></td></tr></table></figure><h2 id="添加子模块"><a href="#添加子模块" class="headerlink" title="添加子模块"></a>添加子模块</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git submodule add remote</span><br></pre></td></tr></table></figure><h2 id="删除子模块"><a href="#删除子模块" class="headerlink" title="删除子模块"></a>删除子模块</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git submodule deinit submodule</span><br><span class="line">$ git rm --cached submodule</span><br></pre></td></tr></table></figure><h2 id="修改子模块-url"><a href="#修改子模块-url" class="headerlink" title="修改子模块 url"></a>修改子模块 url</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先 vim .gitmodules 修改对应子模块的 url</span></span><br><span class="line">$ git submodule sync</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git-设置&quot;&gt;&lt;a href=&quot;#git-设置&quot; class=&quot;headerlink&quot; title=&quot;git 设置&quot;&gt;&lt;/a&gt;&lt;code&gt;git&lt;/code&gt; 设置&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 配置用户名和邮箱&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global user.name &lt;span class=&quot;string&quot;&gt;&quot;gethin&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global user.email &lt;span class=&quot;string&quot;&gt;&quot;gethin.yan@gmail.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Unix/Mac 用户&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global core.autocrlf input&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global core.safecrlf &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Windows 用户&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global core.autocrlf &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global core.safecrlf &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;关于-CRLF-和-LF&quot;&gt;&lt;a href=&quot;#关于-CRLF-和-LF&quot; class=&quot;headerlink&quot; title=&quot;关于 CRLF 和 LF&quot;&gt;&lt;/a&gt;关于 &lt;code&gt;CRLF&lt;/code&gt; 和 &lt;code&gt;LF&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Linux/Mac OS&lt;/code&gt; 以 &lt;code&gt;LF(\n)&lt;/code&gt; 结尾，而 &lt;code&gt;Windows&lt;/code&gt; 以 &lt;code&gt;CRLF(\r\n)&lt;/code&gt; 结尾&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 提交时转换为 LF，检出时转换为 CRLF&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global core.autocrlf &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 提交时转换为 LF，检出时不转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global core.autocrlf input&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 提交检出均不转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global core.autocrlf &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;safecrlf 选项是针对提交时的配置，当有混用的情况发生的时候 git 应该给出的一些表现&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 拒绝提交包含混合换行符的文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global core.safecrlf &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 允许提交包含混合换行符的文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global core.safecrlf &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 提交包含混合换行符的文件时给出警告&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global core.safecrlf warn&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://notes.gethin.cn/tags/git/"/>
    
      <category term="GitHub" scheme="https://notes.gethin.cn/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Kafka 初体验</title>
    <link href="https://notes.gethin.cn/2019/01/16/kafka/"/>
    <id>https://notes.gethin.cn/2019/01/16/kafka/</id>
    <published>2019-01-16T15:32:10.000Z</published>
    <updated>2021-05-08T00:54:41.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kakfa-简介"><a href="#Kakfa-简介" class="headerlink" title="Kakfa 简介"></a><code>Kakfa</code> 简介</h1><p><code>Apache Kafka</code> 是一个分布式流处理平台</p><h2 id="流处理平台三种特性"><a href="#流处理平台三种特性" class="headerlink" title="流处理平台三种特性"></a>流处理平台三种特性</h2><ul><li>可以让你发布和订阅流式的记录。这一方面与消息队列或者企业消息系统类似</li><li>可以储存流式的记录，并且有较好的容错性</li><li>可以在流式记录产生时就进行处理</li></ul><h2 id="Kafka-适用场景"><a href="#Kafka-适用场景" class="headerlink" title="Kafka 适用场景"></a><code>Kafka</code> 适用场景</h2><ul><li>构造实时流数据管道，它可以在系统或应用之间可靠地获取数据（相当于 message queue）</li><li>构建实时流式应用程序，对这些流数据进行转换或者影响（就是流处理，通过 kafka stream topic 和 topic 之间内部进行变化）</li></ul><h2 id="Kafka-四个核心-API"><a href="#Kafka-四个核心-API" class="headerlink" title="Kafka 四个核心 API"></a><code>Kafka</code> 四个核心 API</h2><h3 id="Producer-API"><a href="#Producer-API" class="headerlink" title="Producer API"></a>Producer API</h3><p>The Producer API 允许一个应用程序发布一串流式的数据到一个或者多个 Kafka topic</p><h3 id="Consumer-API"><a href="#Consumer-API" class="headerlink" title="Consumer API"></a>Consumer API</h3><p>The Consumer API 允许一个应用程序订阅一个或多个 topic ，并且对发布给他们的流式数据进行处理</p><h3 id="Streams-API"><a href="#Streams-API" class="headerlink" title="Streams API"></a>Streams API</h3><p>The Streams API 允许一个应用程序作为一个流处理器，消费一个或者多个 topic 产生的输入流，然后生产一个输出流到一个或多个 topic 中去，在输入输出流中进行有效的转换</p><h3 id="Connector-API"><a href="#Connector-API" class="headerlink" title="Connector API"></a>Connector API</h3><p>The Connector API 允许构建并运行可重用的生产者或者消费者，将 Kafka topics 连接到已存在的应用程序或者数据系统。比如，连接到一个关系型数据库，捕捉表（table）的所有变更内容</p><h2 id="Kafka-依赖环境"><a href="#Kafka-依赖环境" class="headerlink" title="Kafka 依赖环境"></a><code>Kafka</code> 依赖环境</h2><ul><li><a href="http://www.gradle.org/installation" target="_blank" rel="noopener">Gradle</a></li><li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">Java</a></li></ul><a id="more"></a><h1 id="安装依赖环境"><a href="#安装依赖环境" class="headerlink" title="安装依赖环境"></a>安装依赖环境</h1><h2 id="安装-Java"><a href="#安装-Java" class="headerlink" title="安装 Java"></a>安装 <code>Java</code></h2><h3 id="下载源码并解压"><a href="#下载源码并解压" class="headerlink" title="下载源码并解压"></a>下载源码并解压</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 root 用户根目录</span></span><br><span class="line">$ <span class="built_in">cd</span> /root</span><br><span class="line"><span class="comment"># 创建 source 文件夹用于存放源码压缩包</span></span><br><span class="line">$ mkdir <span class="built_in">source</span> &amp;&amp; <span class="built_in">cd</span> <span class="built_in">source</span></span><br><span class="line"><span class="comment"># 下载 Jdk 源码</span></span><br><span class="line">$ wget https://download.oracle.com/otn-pub/java/jdk/8u191-b12/2787e4a523244c269598db4e85c51e0c/jdk-8u191-linux-x64.tar.gz?AuthParam=1547191561_cd6fc31e988d398c5a0c796e2a033d89 -O jdk-8u191-linux-x64.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">$ tar -zxvf jdk-8u191-linux-x64.tar.gz</span><br><span class="line"><span class="comment"># 移动到 root 用户根目录</span></span><br><span class="line">$ mv jdk-11.0.1 /root/jdk</span><br></pre></td></tr></table></figure><h3 id="配置-Path"><a href="#配置-Path" class="headerlink" title="配置 Path"></a>配置 <code>Path</code></h3><p>可以针对全局配置文件 <code>/etc/profile</code> 添加 <code>jdk</code> 的 <code>bin</code> 和 <code>jre</code> 文件夹的目录，同样也可以针对 <code>root</code> 用户配置用户的配置文件</p><ul><li><code>/etc/profile</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 export 前面添加下面代码</span></span><br><span class="line">PATH=<span class="variable">$PATH</span>:/root/jdk/bin:/root/jdk/jre</span><br></pre></td></tr></table></figure><ul><li><code>~/.bash_profile</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 export 前面添加下面代码，也可以就在 PATH= 后面添加 :/root/jdk/bin:/root/jdk/jre</span></span><br><span class="line">PATH=<span class="variable">$PATH</span>:/root/jdk/bin:/root/jdk/jre</span><br></pre></td></tr></table></figure><blockquote><p>在配置好了之后别忘了使用 <code>source &lt;profile path&gt;</code> 命令让新配置文件生效</p></blockquote><h2 id="安装-Gradle"><a href="#安装-Gradle" class="headerlink" title="安装 Gradle"></a>安装 <code>Gradle</code></h2><h3 id="下载源码并解压-1"><a href="#下载源码并解压-1" class="headerlink" title="下载源码并解压"></a>下载源码并解压</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 source 文件夹</span></span><br><span class="line">$ <span class="built_in">cd</span> /root/<span class="built_in">source</span></span><br><span class="line"><span class="comment"># 下载 Gradle 源码</span></span><br><span class="line">$ wget https://downloads.gradle.org/distributions/gradle-5.1.1-bin.zip</span><br><span class="line"><span class="comment"># 安装 unzip 命令（已安装请忽略）</span></span><br><span class="line">$ yum install unzip</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">$ unzip gradle-5.1.1-bin.zip</span><br><span class="line"><span class="comment"># 移动到 root 用户根目录</span></span><br><span class="line">$ mv gradle-5.1.1 /root/gradle</span><br></pre></td></tr></table></figure><blockquote><p><code>gradle -v</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; ------------------------------------------------------------</span><br><span class="line">&gt; Gradle 5.1.1</span><br><span class="line">&gt; ------------------------------------------------------------</span><br><span class="line">&gt;</span><br><span class="line">&gt; Build time:   2019-01-10 23:05:02 UTC</span><br><span class="line">&gt; Revision:     3c9abb645fb83932c44e8610642393ad62116807</span><br><span class="line">&gt;</span><br><span class="line">&gt; Kotlin DSL:   1.1.1</span><br><span class="line">&gt; Kotlin:       1.3.11</span><br><span class="line">&gt; Groovy:       2.5.4</span><br><span class="line">&gt; Ant:          Apache Ant(TM) version 1.9.13 compiled on July 10 2018</span><br><span class="line">&gt; JVM:          1.8.0_191 (Oracle Corporation 25.191-b12)</span><br><span class="line">&gt; OS:           Linux 3.10.0-957.1.3.el7.x86_64 amd64</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="配置-Path-1"><a href="#配置-Path-1" class="headerlink" title="配置 Path"></a>配置 <code>Path</code></h3><p>同 <code>Java</code> 的配置方式，只需把 <code>Gradle</code> 的 <code>bin</code> 目录 <code>/root/gradle/bin</code> 加入 <code>PATH</code>即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATH=<span class="variable">$PATH</span>:/root/gradle/bin</span><br></pre></td></tr></table></figure><h1 id="安装-Kafka"><a href="#安装-Kafka" class="headerlink" title="安装 Kafka"></a>安装 <code>Kafka</code></h1><h2 id="下载源码并解压-2"><a href="#下载源码并解压-2" class="headerlink" title="下载源码并解压"></a>下载源码并解压</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 Kafka 源码</span></span><br><span class="line">$ wget http://archive.apache.org/dist/kafka/2.1.0/kafka_2.11-2.1.0.tgz</span><br><span class="line"><span class="comment"># 解压源码</span></span><br><span class="line">$ tar -zxvf kafka_2.11-2.1.0.tgz</span><br><span class="line"><span class="comment"># 移动到指定目录</span></span><br><span class="line">$ mv kafka_2.11-2.1.0 /path/to/kafka</span><br></pre></td></tr></table></figure><h2 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h2><blockquote><p>下面的命令都是在 <code>Kafka</code> 的根目录运行的，请先进入 <code>Kafka</code> 的根目录</p></blockquote><h3 id="启动-ZooKeeper-服务器"><a href="#启动-ZooKeeper-服务器" class="headerlink" title="启动 ZooKeeper 服务器"></a>启动 <code>ZooKeeper</code> 服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/zookeeper-server-start.sh config/zookeeper.properties &amp;</span><br></pre></td></tr></table></figure><h3 id="启动-Kafka-服务器"><a href="#启动-Kafka-服务器" class="headerlink" title="启动 Kafka 服务器"></a>启动 <code>Kafka</code> 服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-server-start.sh config/server.properties &amp;</span><br></pre></td></tr></table></figure><h3 id="创建一个-topic"><a href="#创建一个-topic" class="headerlink" title="创建一个 topic"></a>创建一个 <code>topic</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="查看-topic"><a href="#查看-topic" class="headerlink" title="查看 topic"></a>查看 <code>topic</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-topics.sh --list --zookeeper localhost:2181</span><br><span class="line">__consumer_offsets</span><br><span class="line"><span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h3><p>运行 <code>producer</code>（生产者），然后在控制台输入一些消息以发送到服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-console-producer.sh --broker-list localhost:9092 --topic <span class="built_in">test</span></span><br><span class="line">&gt;This is a message</span><br><span class="line">&gt;This is another message</span><br></pre></td></tr></table></figure><h3 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h3><p><code>Kafka</code> 还有一个命令行 <code>consumer</code>（消费者），将消息转储到标准输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic <span class="built_in">test</span> --from-beginning</span><br><span class="line">This is a message</span><br><span class="line">This is another message</span><br></pre></td></tr></table></figure><!--### 设置多代理集群--><h1 id="php-处理-Kafka-消息"><a href="#php-处理-Kafka-消息" class="headerlink" title="php 处理 Kafka 消息"></a><code>php</code> 处理 <code>Kafka</code> 消息</h1><h2 id="编译安装-librdkafka"><a href="#编译安装-librdkafka" class="headerlink" title="编译安装 librdkafka"></a>编译安装 <code>librdkafka</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 librdkafka 源码</span></span><br><span class="line">$ wget https://github.com/edenhill/librdkafka/archive/v0.11.6.tar.gz</span><br><span class="line"><span class="comment"># 解压源码</span></span><br><span class="line">$ tar -zxvf v0.11.6.tar.gz</span><br><span class="line"><span class="comment"># 进入 librdkafka 文件夹</span></span><br><span class="line">$ <span class="built_in">cd</span> librdkafka-0.11.6</span><br><span class="line"><span class="comment"># 编译安装 librdkafka</span></span><br><span class="line">$ ./configure</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h2 id="编译安装-php-rdkafka-扩展"><a href="#编译安装-php-rdkafka-扩展" class="headerlink" title="编译安装 php-rdkafka 扩展"></a>编译安装 <code>php-rdkafka</code> 扩展</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ su work</span><br><span class="line">$ <span class="built_in">cd</span> /home/work/<span class="built_in">source</span></span><br><span class="line"><span class="comment"># 下载 php-rdkafka 源码</span></span><br><span class="line">$ wget https://github.com/arnaud-lb/php-rdkafka/archive/3.0.5.tar.gz</span><br><span class="line"><span class="comment"># 解压源码</span></span><br><span class="line">$ tar -zxvf 3.0.5.tar.gz</span><br><span class="line"><span class="comment"># 进入 php-rdkafka 文件夹</span></span><br><span class="line">$ <span class="built_in">cd</span> php-rdkafka-3.0.5</span><br><span class="line"><span class="comment"># 运行 phpize 命令，写全 phpize 的路径</span></span><br><span class="line">$ /home/work/orp/php/bin/phpize</span><br><span class="line"><span class="comment"># 编译安装 php-rdkafka</span></span><br><span class="line">$ ./configure --with-php-config=/home/work/orp/php/bin/php-config</span><br><span class="line">$ make all -j 5 &amp;&amp; make install</span><br></pre></td></tr></table></figure><h2 id="配置-php-ini"><a href="#配置-php-ini" class="headerlink" title="配置 php.ini"></a>配置 <code>php.ini</code></h2><h3 id="编辑-php-ini-文件"><a href="#编辑-php-ini-文件" class="headerlink" title="编辑 php.ini 文件"></a>编辑 <code>php.ini</code> 文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把安装好的扩展加加入 php.ini</span></span><br><span class="line">extension=rdkafka.so</span><br></pre></td></tr></table></figure><h3 id="重启-php-fpm"><a href="#重启-php-fpm" class="headerlink" title="重启 php-fpm"></a>重启 <code>php-fpm</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 php-fpm 进程</span></span><br><span class="line">$ ps -ef | grep php</span><br><span class="line">work      6817     0  0 08:19 ?        00:00:00 php-fpm: master process (/home/work/orp/php/etc/php-fpm.conf)</span><br><span class="line">work      6818  6817  0 08:19 ?        00:00:00 php-fpm: pool www</span><br><span class="line">work      6819  6817  0 08:19 ?        00:00:00 php-fpm: pool www</span><br><span class="line">work      6840  2732  0 08:24 pts/1    00:00:00 grep php</span><br><span class="line"><span class="comment"># 重启 php-fpm</span></span><br><span class="line">$ <span class="built_in">kill</span> -USR2 38</span><br></pre></td></tr></table></figure><blockquote><p>现在打开 <code>phpinfo</code> 页面搜索 <code>rdkafka</code> 扩展可以看到我们已经成功安装了 <code>rdkafka</code> 扩展，下面我们将在实战中使用到 <code>Kafka</code></p></blockquote><h2 id="生产者-Producer"><a href="#生产者-Producer" class="headerlink" title="生产者 Producer"></a>生产者 <code>Producer</code></h2><h3 id="php-代码"><a href="#php-代码" class="headerlink" title="php 代码"></a><code>php</code> 代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$rk = <span class="keyword">new</span> RdKafka\Producer();</span><br><span class="line">$rk-&gt;setLogLevel(LOG_DEBUG);</span><br><span class="line"><span class="comment">// 配置 Kafka 的 ip 地址，我这里是容器调用宿主机里的 Kafka</span></span><br><span class="line">$rk-&gt;addBrokers(<span class="string">'172.17.0.1'</span>);</span><br><span class="line"></span><br><span class="line">$topic = $rk-&gt;newTopic(<span class="string">'test'</span>);</span><br><span class="line">$topic-&gt;produce(RD_KAFKA_PARTITION_UA, <span class="number">0</span>, <span class="string">'Message payload'</span>);</span><br></pre></td></tr></table></figure><h3 id="运行生产者代码"><a href="#运行生产者代码" class="headerlink" title="运行生产者代码"></a>运行生产者代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /home/work/orp/php/bin/php /home/work/orp/webroot/producer.php</span><br></pre></td></tr></table></figure><h3 id="运行-Kafka-消费者查看"><a href="#运行-Kafka-消费者查看" class="headerlink" title="运行 Kafka 消费者查看"></a>运行 <code>Kafka</code> 消费者查看</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /root/kafka</span><br><span class="line">$ bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic <span class="built_in">test</span> --from-beginning</span><br><span class="line">Message payload</span><br><span class="line">Message payload</span><br></pre></td></tr></table></figure><h2 id="消费者-Consumer"><a href="#消费者-Consumer" class="headerlink" title="消费者 Consumer"></a>消费者 <code>Consumer</code></h2><h3 id="Low-level-consumer"><a href="#Low-level-consumer" class="headerlink" title="Low-level consumer"></a>Low-level consumer</h3><h4 id="php-代码-1"><a href="#php-代码-1" class="headerlink" title="php 代码"></a><code>php</code> 代码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$rk = <span class="keyword">new</span> RdKafka\Consumer();</span><br><span class="line">$rk-&gt;setLogLevel(LOG_DEBUG);</span><br><span class="line">$rk-&gt;addBrokers(<span class="string">'172.17.0.1'</span>);</span><br><span class="line"></span><br><span class="line">$topic = $rk-&gt;newTopic(<span class="string">'test'</span>);</span><br><span class="line"><span class="comment">// The first argument is the partition to consume from.</span></span><br><span class="line"><span class="comment">// The second argument is the offset at which to start consumption. Valid values</span></span><br><span class="line"><span class="comment">// are: RD_KAFKA_OFFSET_BEGINNING, RD_KAFKA_OFFSET_END, RD_KAFKA_OFFSET_STORED.</span></span><br><span class="line">$topic-&gt;consumeStart(<span class="number">0</span>, RD_KAFKA_OFFSET_BEGINNING);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    <span class="comment">// The first argument is the partition (again).</span></span><br><span class="line">    <span class="comment">// The second argument is the timeout.</span></span><br><span class="line">    $msg = $topic-&gt;consume(<span class="number">0</span>, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">if</span> ($msg-&gt;err) &#123;</span><br><span class="line">        <span class="keyword">echo</span> $msg-&gt;errstr(), <span class="string">"\n"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> $msg-&gt;payload, <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行低级消费者-php-代码"><a href="#运行低级消费者-php-代码" class="headerlink" title="运行低级消费者 php 代码"></a>运行低级消费者 <code>php</code> 代码</h4><blockquote><p>可以看到我们已经成功的接收到了生产者生产的消息</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ /home/work/orp/php/bin/php consumer.php</span><br><span class="line">Message payload</span><br><span class="line">Message payload</span><br><span class="line">Broker: No more messages</span><br></pre></td></tr></table></figure><h3 id="High-level-consumer"><a href="#High-level-consumer" class="headerlink" title="High-level consumer"></a>High-level consumer</h3><h4 id="php-代码-2"><a href="#php-代码-2" class="headerlink" title="php 代码"></a><code>php</code> 代码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$conf = <span class="keyword">new</span> RdKafka\Conf();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set a rebalance callback to log partition assignments (optional)</span></span><br><span class="line">$conf-&gt;setRebalanceCb(<span class="function"><span class="keyword">function</span> <span class="params">(RdKafka\KafkaConsumer $kafka, $err, array $partitions = null)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> ($err) &#123;</span><br><span class="line">        <span class="keyword">case</span> RD_KAFKA_RESP_ERR__ASSIGN_PARTITIONS:</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Assign: '</span>;</span><br><span class="line">            var_dump($partitions);</span><br><span class="line">            $kafka-&gt;assign($partitions);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">case</span> RD_KAFKA_RESP_ERR__REVOKE_PARTITIONS:</span><br><span class="line">             <span class="keyword">echo</span> <span class="string">'Revoke: '</span>;</span><br><span class="line">             var_dump($partitions);</span><br><span class="line">             $kafka-&gt;assign(<span class="keyword">null</span>);</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>($err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Configure the group.id. All consumer with the same group.id will consume</span></span><br><span class="line"><span class="comment">// different partitions.</span></span><br><span class="line">$conf-&gt;set(<span class="string">'group.id'</span>, <span class="string">'myConsumerGroup'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initial list of Kafka brokers</span></span><br><span class="line">$conf-&gt;set(<span class="string">'metadata.broker.list'</span>, <span class="string">'172.17.0.1'</span>);</span><br><span class="line"></span><br><span class="line">$topicConf = <span class="keyword">new</span> RdKafka\TopicConf();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set where to start consuming messages when there is no initial offset in</span></span><br><span class="line"><span class="comment">// offset store or the desired offset is out of range.</span></span><br><span class="line"><span class="comment">// 'smallest': start from the beginning</span></span><br><span class="line">$topicConf-&gt;set(<span class="string">'auto.offset.reset'</span>, <span class="string">'smallest'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the configuration to use for subscribed/assigned topics</span></span><br><span class="line">$conf-&gt;setDefaultTopicConf($topicConf);</span><br><span class="line"></span><br><span class="line">$consumer = <span class="keyword">new</span> RdKafka\KafkaConsumer($conf);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Subscribe to topic 'test'</span></span><br><span class="line">$consumer-&gt;subscribe([<span class="string">'test'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Waiting for partition assignment... (make take some time when\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"quickly re-joining the group after leaving it.)\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    $message = $consumer-&gt;consume(<span class="number">120</span> * <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">switch</span> ($message-&gt;err) &#123;</span><br><span class="line">        <span class="keyword">case</span> RD_KAFKA_RESP_ERR_NO_ERROR:</span><br><span class="line">            var_dump($message);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> RD_KAFKA_RESP_ERR__PARTITION_EOF:</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"No more messages; will wait for more\n"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> RD_KAFKA_RESP_ERR__TIMED_OUT:</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Timed out\n"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>($message-&gt;errstr(), $message-&gt;err);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行高级消费者-php-代码"><a href="#运行高级消费者-php-代码" class="headerlink" title="运行高级消费者 php 代码"></a>运行高级消费者 <code>php</code> 代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ /home/work/orp/php/bin/php highConsumer.php</span><br><span class="line">object(RdKafka\Message)<span class="comment">#6 (7) &#123;</span></span><br><span class="line">  [<span class="string">"err"</span>]=&gt;</span><br><span class="line">  int(0)</span><br><span class="line">  [<span class="string">"topic_name"</span>]=&gt;</span><br><span class="line">  string(4) <span class="string">"test"</span></span><br><span class="line">  [<span class="string">"partition"</span>]=&gt;</span><br><span class="line">  int(0)</span><br><span class="line">  [<span class="string">"payload"</span>]=&gt;</span><br><span class="line">  string(15) <span class="string">"Message payload"</span></span><br><span class="line">  [<span class="string">"len"</span>]=&gt;</span><br><span class="line">  int(15)</span><br><span class="line">  [<span class="string">"key"</span>]=&gt;</span><br><span class="line">  NULL</span><br><span class="line">  [<span class="string">"offset"</span>]=&gt;</span><br><span class="line">  int(23)</span><br><span class="line">&#125;</span><br><span class="line">object(RdKafka\Message)<span class="comment">#5 (7) &#123;</span></span><br><span class="line">  [<span class="string">"err"</span>]=&gt;</span><br><span class="line">  int(0)</span><br><span class="line">  [<span class="string">"topic_name"</span>]=&gt;</span><br><span class="line">  string(4) <span class="string">"test"</span></span><br><span class="line">  [<span class="string">"partition"</span>]=&gt;</span><br><span class="line">  int(0)</span><br><span class="line">  [<span class="string">"payload"</span>]=&gt;</span><br><span class="line">  string(15) <span class="string">"Message payload"</span></span><br><span class="line">  [<span class="string">"len"</span>]=&gt;</span><br><span class="line">  int(15)</span><br><span class="line">  [<span class="string">"key"</span>]=&gt;</span><br><span class="line">  NULL</span><br><span class="line">  [<span class="string">"offset"</span>]=&gt;</span><br><span class="line">  int(24)</span><br><span class="line">&#125;</span><br><span class="line">No more messages; will <span class="built_in">wait</span> <span class="keyword">for</span> more</span><br></pre></td></tr></table></figure><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="容器内访问不到容器外的端口"><a href="#容器内访问不到容器外的端口" class="headerlink" title="容器内访问不到容器外的端口"></a>容器内访问不到容器外的端口</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>在运行消费者、生产者的时候，报错最多的就是 <code>&#39;hostname:9092&#39;: Name or service not known</code>，最开始使用的是 <code>172.17.0.1</code> 宿主机的 <code>ip</code> 去调用的，出现的上述问题，后又用外网 <code>ip</code> 去调用，因为安全组导致端口未暴露，所以在阿里云管理控制台的安全组加了 9092，加了安全组在线工具检测 9092 端口是打开状态，但是在运行生产者代码的时候还是会报错 <code>&#39;hostname:9092&#39;: Name or service not known</code>，于是我自闭了</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>其实通过报错 <code>&#39;hostname:9092&#39;: Name or service not known</code> 我们可以得知系统不知道这个 <code>hostname</code>，于是我尝试性的在 <code>/etc/hosts</code> 文件里面加了一行 <code>172.17.0.1 hostname</code>，然后重启网络，莫名其妙的就成功了，取消自闭模式</p><h3 id="关闭防火墙导致访问不到外网"><a href="#关闭防火墙导致访问不到外网" class="headerlink" title="关闭防火墙导致访问不到外网"></a>关闭防火墙导致访问不到外网</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>因为不知道是不是因为防火墙的问题，所以就偷偷的把防火墙给关了，结果后面发现容器里面连不上外网，发现这个问题是看到同事在本地使用 <code>127.0.0.1</code> 调用成功了，所以打算在容器里装上 <code>Kafka</code> 然后用 <code>127.0.0.1</code> 调用，结果连不上网无法 <code>wget</code> 下载源码包</p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p>重启 <code>docker</code>，然后 <code>dokcer start container</code> 启动容器即可，经过上机测试，需要注意的是 <code>docker</code> 容器能不能访问到外网跟 <code>docker</code> 启动的那一刻宿主机的防火墙状态有关系，宿主机防火墙是关闭的那么开启之后需要重启 <code>docker</code> 容器才能访问外网，反之同理</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Kakfa-简介&quot;&gt;&lt;a href=&quot;#Kakfa-简介&quot; class=&quot;headerlink&quot; title=&quot;Kakfa 简介&quot;&gt;&lt;/a&gt;&lt;code&gt;Kakfa&lt;/code&gt; 简介&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Apache Kafka&lt;/code&gt; 是一个分布式流处理平台&lt;/p&gt;
&lt;h2 id=&quot;流处理平台三种特性&quot;&gt;&lt;a href=&quot;#流处理平台三种特性&quot; class=&quot;headerlink&quot; title=&quot;流处理平台三种特性&quot;&gt;&lt;/a&gt;流处理平台三种特性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;可以让你发布和订阅流式的记录。这一方面与消息队列或者企业消息系统类似&lt;/li&gt;
&lt;li&gt;可以储存流式的记录，并且有较好的容错性&lt;/li&gt;
&lt;li&gt;可以在流式记录产生时就进行处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Kafka-适用场景&quot;&gt;&lt;a href=&quot;#Kafka-适用场景&quot; class=&quot;headerlink&quot; title=&quot;Kafka 适用场景&quot;&gt;&lt;/a&gt;&lt;code&gt;Kafka&lt;/code&gt; 适用场景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;构造实时流数据管道，它可以在系统或应用之间可靠地获取数据（相当于 message queue）&lt;/li&gt;
&lt;li&gt;构建实时流式应用程序，对这些流数据进行转换或者影响（就是流处理，通过 kafka stream topic 和 topic 之间内部进行变化）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Kafka-四个核心-API&quot;&gt;&lt;a href=&quot;#Kafka-四个核心-API&quot; class=&quot;headerlink&quot; title=&quot;Kafka 四个核心 API&quot;&gt;&lt;/a&gt;&lt;code&gt;Kafka&lt;/code&gt; 四个核心 API&lt;/h2&gt;&lt;h3 id=&quot;Producer-API&quot;&gt;&lt;a href=&quot;#Producer-API&quot; class=&quot;headerlink&quot; title=&quot;Producer API&quot;&gt;&lt;/a&gt;Producer API&lt;/h3&gt;&lt;p&gt;The Producer API 允许一个应用程序发布一串流式的数据到一个或者多个 Kafka topic&lt;/p&gt;
&lt;h3 id=&quot;Consumer-API&quot;&gt;&lt;a href=&quot;#Consumer-API&quot; class=&quot;headerlink&quot; title=&quot;Consumer API&quot;&gt;&lt;/a&gt;Consumer API&lt;/h3&gt;&lt;p&gt;The Consumer API 允许一个应用程序订阅一个或多个 topic ，并且对发布给他们的流式数据进行处理&lt;/p&gt;
&lt;h3 id=&quot;Streams-API&quot;&gt;&lt;a href=&quot;#Streams-API&quot; class=&quot;headerlink&quot; title=&quot;Streams API&quot;&gt;&lt;/a&gt;Streams API&lt;/h3&gt;&lt;p&gt;The Streams API 允许一个应用程序作为一个流处理器，消费一个或者多个 topic 产生的输入流，然后生产一个输出流到一个或多个 topic 中去，在输入输出流中进行有效的转换&lt;/p&gt;
&lt;h3 id=&quot;Connector-API&quot;&gt;&lt;a href=&quot;#Connector-API&quot; class=&quot;headerlink&quot; title=&quot;Connector API&quot;&gt;&lt;/a&gt;Connector API&lt;/h3&gt;&lt;p&gt;The Connector API 允许构建并运行可重用的生产者或者消费者，将 Kafka topics 连接到已存在的应用程序或者数据系统。比如，连接到一个关系型数据库，捕捉表（table）的所有变更内容&lt;/p&gt;
&lt;h2 id=&quot;Kafka-依赖环境&quot;&gt;&lt;a href=&quot;#Kafka-依赖环境&quot; class=&quot;headerlink&quot; title=&quot;Kafka 依赖环境&quot;&gt;&lt;/a&gt;&lt;code&gt;Kafka&lt;/code&gt; 依赖环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gradle.org/installation&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="CentOS" scheme="https://notes.gethin.cn/tags/CentOS/"/>
    
      <category term="Kafka" scheme="https://notes.gethin.cn/tags/Kafka/"/>
    
      <category term="php" scheme="https://notes.gethin.cn/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>使用 Hexo + Next 搭建博客</title>
    <link href="https://notes.gethin.cn/2019/01/04/hexo-next/"/>
    <id>https://notes.gethin.cn/2019/01/04/hexo-next/</id>
    <published>2019-01-04T18:39:30.000Z</published>
    <updated>2021-05-08T00:54:41.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><h2 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h2><ul><li><p>Hexo 是一个快速、简洁且高效的博客框架</p></li><li><p>Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页</p></li></ul><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><h3 id="安装前请确保已经安装以下环境"><a href="#安装前请确保已经安装以下环境" class="headerlink" title="安装前请确保已经安装以下环境"></a>安装前请确保已经安装以下环境</h3><ul><li>Node.js</li><li>git</li></ul><h3 id="安装-Hexo-命令"><a href="#安装-Hexo-命令" class="headerlink" title="安装 Hexo 命令"></a>安装 Hexo 命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="安装完成后执行以下命令即可"><a href="#安装完成后执行以下命令即可" class="headerlink" title="安装完成后执行以下命令即可"></a>安装完成后执行以下命令即可</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入你期望存放的目录创建 blog 文件夹</span></span><br><span class="line">$ <span class="built_in">cd</span> ~ &amp;&amp; mkdir blog</span><br><span class="line"><span class="comment"># 使用 hexo 初始化 blog</span></span><br><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br><span class="line"><span class="comment"># 启动服务器。默认情况下，访问网址为： http://localhost:4000/</span></span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>至此，我们已经完成了万里长征的第一步，但是 Hexo 默认的主题不太好看，推荐使用简洁好看的 <a href="http://theme-next.iissnan.com" target="_blank" rel="noopener">Next</a> 主题，下面介绍如何结合 <a href="http://theme-next.iissnan.com" target="_blank" rel="noopener">Next</a></p><a id="more"></a><h1 id="使用-Next-主题"><a href="#使用-Next-主题" class="headerlink" title="使用 Next 主题"></a>使用 Next 主题</h1><h2 id="安装-Next-主题"><a href="#安装-Next-主题" class="headerlink" title="安装 Next 主题"></a>安装 Next 主题</h2><h3 id="在终端窗口下，定位到-Hexo-站点目录下"><a href="#在终端窗口下，定位到-Hexo-站点目录下" class="headerlink" title="在终端窗口下，定位到 Hexo 站点目录下"></a>在终端窗口下，定位到 Hexo 站点目录下</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/blog</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h3 id="启用-Next-主题，打开-blog-config-yml-修改-theme"><a href="#启用-Next-主题，打开-blog-config-yml-修改-theme" class="headerlink" title="启用 Next 主题，打开 ~/blog/_config.yml 修改 theme"></a>启用 Next 主题，打开 <code>~/blog/_config.yml</code> 修改 <code>theme</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><h3 id="重新启动服务器"><a href="#重新启动服务器" class="headerlink" title="重新启动服务器"></a>重新启动服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><blockquote><p>好了，现在打开 <code>http://0.0.0.0:4000/</code> 看看我们的博客发生了什么变化吧</p></blockquote><h1 id="上传到-github-通过-username-github-io-访问"><a href="#上传到-github-通过-username-github-io-访问" class="headerlink" title="上传到 github 通过 username.github.io 访问"></a>上传到 github 通过 <code>username.github.io</code> 访问</h1><h2 id="部署博客代码"><a href="#部署博客代码" class="headerlink" title="部署博客代码"></a>部署博客代码</h2><h3 id="安装-hexo-deployer-git"><a href="#安装-hexo-deployer-git" class="headerlink" title="安装 hexo-deployer-git"></a>安装 <code>hexo-deployer-git</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="打开-blog-config-yml-配置-deploy"><a href="#打开-blog-config-yml-配置-deploy" class="headerlink" title="打开 ~/blog/_config.yml 配置 deploy"></a>打开 <code>~/blog/_config.yml</code> 配置 deploy</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/gethinyan/gethinyan.github.io.git <span class="comment"># 替换为你的仓库路径</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="部署代码，部署前需要创建仓库-username-github-io"><a href="#部署代码，部署前需要创建仓库-username-github-io" class="headerlink" title="部署代码，部署前需要创建仓库 username.github.io"></a>部署代码，部署前需要创建仓库 <code>username.github.io</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><p>现在打开 <del><code>http://0.0.0.0:4000/</code></del> <code>https://username.github.io/</code> 看看是否成功了呢</p><h1 id="使用-travis-完成自动构建、部署"><a href="#使用-travis-完成自动构建、部署" class="headerlink" title="使用 travis 完成自动构建、部署"></a>使用 travis 完成自动构建、部署</h1><h2 id="Activate-repository"><a href="#Activate-repository" class="headerlink" title="Activate repository"></a>Activate repository</h2><p>在做下面的操作前请先打开 <a href="https://www.travis-ci.org/" target="_blank" rel="noopener">https://www.travis-ci.org</a> active 你的 Hexo 项目</p><h3 id="设置-Environment-Variables"><a href="#设置-Environment-Variables" class="headerlink" title="设置 Environment Variables"></a>设置 Environment Variables</h3><ul><li>打开 settings 页面</li><li>添加 Environment Variables</li><li>添加变量 GITHUB_TOKEN，值在 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">https://github.com/settings/tokens</a> 生成即可</li></ul><h3 id="在-Hexo-项目根目录添加文件-travis-yml"><a href="#在-Hexo-项目根目录添加文件-travis-yml" class="headerlink" title="在 Hexo 项目根目录添加文件 .travis.yml"></a>在 Hexo 项目根目录添加文件 <code>.travis.yml</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js: stable</span><br><span class="line">cache:</span><br><span class="line">  apt: <span class="literal">true</span></span><br><span class="line">  directories:</span><br><span class="line">    - node_modules</span><br><span class="line">install:</span><br><span class="line">- npm install</span><br><span class="line">script:</span><br><span class="line">- hexo clean</span><br><span class="line">- hexo g</span><br><span class="line">after_script:</span><br><span class="line">- <span class="built_in">cd</span> ./public</span><br><span class="line">- git init</span><br><span class="line">- git config user.name <span class="string">"gethin.yan"</span></span><br><span class="line">- git config user.email <span class="string">"gethin.yan@gmail.com"</span></span><br><span class="line">- git add .</span><br><span class="line">- git commit -m <span class="string">"update notes"</span></span><br><span class="line">- git push --force --quiet <span class="string">"https://<span class="variable">$&#123;GITHUB_TOKEN&#125;</span>@<span class="variable">$&#123;GH_REF&#125;</span>"</span> master:master</span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">  - master</span><br><span class="line">env:</span><br><span class="line">  global:</span><br><span class="line">  - GH_REF: github.com/gethinyan/gethinyan.github.io.git</span><br></pre></td></tr></table></figure><p>现在试试把 Hexo 的代码 push 到 github 上，打开 <a href="https://www.travis-ci.org/" target="_blank" rel="noopener">https://www.travis-ci.org</a> 对应项目的 <code>Build History</code>，查看构建的过程，成功后你会发现仓库 <code>username.github.io</code> 的文件刚被更新</p><h2 id="github-Webhooks-实现服务器自动拉代码"><a href="#github-Webhooks-实现服务器自动拉代码" class="headerlink" title="github Webhooks 实现服务器自动拉代码"></a><code>github Webhooks</code> 实现服务器自动拉代码</h2><blockquote><p>以下的文档适用于有自己的云服务器的盆友，想要实现自动部署博客代码到自己的服务器上</p></blockquote><h3 id="添加-webhook"><a href="#添加-webhook" class="headerlink" title="添加 webhook"></a>添加 webhook</h3><p>打开仓库 <code>username.github.io</code> 的 <code>settings &gt; Webhooks</code> 添加一个 webhook，值为 <code>http://yourip:10002/</code>，secret 自己设置一个，在下面的脚本需要用到</p><h3 id="开启服务监听-webhook-配置的-10002-端口"><a href="#开启服务监听-webhook-配置的-10002-端口" class="headerlink" title="开启服务监听 webhook 配置的 10002 端口"></a>开启服务监听 webhook 配置的 10002 端口</h3><p>现在需要开启一个服务监听 10002 端口并且 secret 是 Webhook 配置的 secret，然后执行一个脚本 <code>deploy.sh</code>，在脚本里面去拉最新的代码到我们的 webroot</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># webhook.js</span></span><br><span class="line">const http = require(<span class="string">'http'</span>)</span><br><span class="line">const webhookHandler = require(<span class="string">'github-webhook-handler'</span>)</span><br><span class="line"></span><br><span class="line">const handler = webhookHandler(&#123; path: <span class="string">'/'</span>, secret: <span class="string">'123456'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> cmd (cmd, args, callback) &#123;</span><br><span class="line">  const spawn = require(<span class="string">'child_process'</span>).spawn</span><br><span class="line">  const child = spawn(cmd, args)</span><br><span class="line">  <span class="built_in">let</span> res = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">  child.stdout.on(<span class="string">'data'</span>, buffer =&gt; &#123; res += buffer.toString() &#125;)</span><br><span class="line">  child.stdout.on(<span class="string">'end'</span>, () =&gt; &#123; callback(res) &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http.createServer((req, res) =&gt; &#123;</span><br><span class="line">  handler(req, res, err =&gt; &#123;</span><br><span class="line">    res.statusCode = 404</span><br><span class="line">    res.end(<span class="string">'no such loacion'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).listen(10002)</span><br><span class="line"></span><br><span class="line">handler.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">  console.error(<span class="string">'Error: '</span>, err.message)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">handler.on(<span class="string">'push'</span>, event =&gt; &#123;</span><br><span class="line">  const &#123; repository, ref &#125; = event.payload</span><br><span class="line">  console.log(`Reveived a push event <span class="keyword">for</span> <span class="variable">$&#123;repository.name&#125;</span> to <span class="variable">$&#123;ref&#125;</span>`)</span><br><span class="line">  cmd(<span class="string">'sh'</span>, [<span class="string">'./deploy.sh'</span>, repository.name], text =&gt; &#123;</span><br><span class="line">    console.log(text)  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入到 webhook.js 的目录运行下面命令</span></span><br><span class="line">$ npm install github-webhook-handler</span><br><span class="line">$ npm install pm2 -g</span><br><span class="line">$ pm2 start webhook.js</span><br><span class="line">$ pm2 startup</span><br></pre></td></tr></table></figure><p>不妨试试添加一个 test.md 并发布 push 到 github，首先在 travis 构建部署成功，然后触发 webhook，最后新的代码部署到我们的服务器，打开你的博客地址就能看到 test 了</p><h1 id="travis-命令实现免登录-ssh-部署代码"><a href="#travis-命令实现免登录-ssh-部署代码" class="headerlink" title="travis 命令实现免登录 ssh 部署代码"></a>travis 命令实现免登录 ssh 部署代码</h1><h2 id="安装-travis"><a href="#安装-travis" class="headerlink" title="安装 travis"></a>安装 travis</h2><h3 id="安装-ruby"><a href="#安装-ruby" class="headerlink" title="安装 ruby"></a>安装 ruby</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install rubygems</span><br></pre></td></tr></table></figure><h3 id="更新-gem，设置镜像源"><a href="#更新-gem，设置镜像源" class="headerlink" title="更新 gem，设置镜像源"></a>更新 gem，设置镜像源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gem update --system</span><br><span class="line">$ gem sources --add https://gems.ruby-china.org/</span><br></pre></td></tr></table></figure><h3 id="使用-gem-安装-travis"><a href="#使用-gem-安装-travis" class="headerlink" title="使用 gem 安装 travis"></a>使用 gem 安装 travis</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem install travis</span><br></pre></td></tr></table></figure><h2 id="travis-配置"><a href="#travis-配置" class="headerlink" title="travis 配置"></a>travis 配置</h2><h3 id="登录-travis"><a href="#登录-travis" class="headerlink" title="登录 travis"></a>登录 travis</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ travis login</span><br></pre></td></tr></table></figure><h3 id="使用-travis-加密公钥文件"><a href="#使用-travis-加密公钥文件" class="headerlink" title="使用 travis 加密公钥文件"></a>使用 travis 加密公钥文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ travis encrypt-file ~/.ssh/id_rsa --add</span><br></pre></td></tr></table></figure><h3 id="查看-travis-yml-的变化"><a href="#查看-travis-yml-的变化" class="headerlink" title="查看 .travis.yml 的变化"></a>查看 <code>.travis.yml</code> 的变化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">before_deploy:</span><br><span class="line">- openssl aes-256-cbc -K <span class="variable">$encrypted_99fb0ffd7f47_key</span> -iv <span class="variable">$encrypted_99fb0ffd7f47_iv</span></span><br><span class="line">  -<span class="keyword">in</span> id_rsa.enc -out /tmp/id_rsa -d</span><br><span class="line">- <span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></span><br><span class="line">- chmod 600 /tmp/id_rsa</span><br><span class="line">- ssh-add /tmp/id_rsa</span><br><span class="line"></span><br><span class="line">after_success:</span><br><span class="line">  - ssh -o StrictHostKeyChecking=no root@youtip <span class="string">"bash ./deploy.sh"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo&quot;&gt;&lt;a href=&quot;#Hexo&quot; class=&quot;headerlink&quot; title=&quot;Hexo&quot;&gt;&lt;/a&gt;Hexo&lt;/h1&gt;&lt;h2 id=&quot;什么是-Hexo？&quot;&gt;&lt;a href=&quot;#什么是-Hexo？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Hexo？&quot;&gt;&lt;/a&gt;什么是 Hexo？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装-Hexo&quot;&gt;&lt;a href=&quot;#安装-Hexo&quot; class=&quot;headerlink&quot; title=&quot;安装 Hexo&quot;&gt;&lt;/a&gt;安装 Hexo&lt;/h2&gt;&lt;h3 id=&quot;安装前请确保已经安装以下环境&quot;&gt;&lt;a href=&quot;#安装前请确保已经安装以下环境&quot; class=&quot;headerlink&quot; title=&quot;安装前请确保已经安装以下环境&quot;&gt;&lt;/a&gt;安装前请确保已经安装以下环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;安装-Hexo-命令&quot;&gt;&lt;a href=&quot;#安装-Hexo-命令&quot; class=&quot;headerlink&quot; title=&quot;安装 Hexo 命令&quot;&gt;&lt;/a&gt;安装 Hexo 命令&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install -g hexo-cli&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;安装完成后执行以下命令即可&quot;&gt;&lt;a href=&quot;#安装完成后执行以下命令即可&quot; class=&quot;headerlink&quot; title=&quot;安装完成后执行以下命令即可&quot;&gt;&lt;/a&gt;安装完成后执行以下命令即可&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 进入你期望存放的目录创建 blog 文件夹&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~ &amp;amp;&amp;amp; mkdir blog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 使用 hexo 初始化 blog&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hexo init blog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; blog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 启动服务器。默认情况下，访问网址为： http://localhost:4000/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hexo s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;至此，我们已经完成了万里长征的第一步，但是 Hexo 默认的主题不太好看，推荐使用简洁好看的 &lt;a href=&quot;http://theme-next.iissnan.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Next&lt;/a&gt; 主题，下面介绍如何结合 &lt;a href=&quot;http://theme-next.iissnan.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Next&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://notes.gethin.cn/tags/Hexo/"/>
    
      <category term="GitHub Pages" scheme="https://notes.gethin.cn/tags/GitHub-Pages/"/>
    
      <category term="Next" scheme="https://notes.gethin.cn/tags/Next/"/>
    
      <category term="travis" scheme="https://notes.gethin.cn/tags/travis/"/>
    
      <category term="deploy" scheme="https://notes.gethin.cn/tags/deploy/"/>
    
  </entry>
  
  <entry>
    <title>rsync &amp; sersync 实现文件同步</title>
    <link href="https://notes.gethin.cn/2019/01/02/rsync/"/>
    <id>https://notes.gethin.cn/2019/01/02/rsync/</id>
    <published>2019-01-02T17:44:12.000Z</published>
    <updated>2021-05-08T00:54:41.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>由于一台主服务器压力比较大，需要启用备用机开启负载均衡减轻主服务器的压力，同步主服务器的代码、静态资源到从服务器让从服务器跑起来</p><h1 id="从服务器"><a href="#从服务器" class="headerlink" title="从服务器"></a>从服务器</h1><h2 id="安装-rsync"><a href="#安装-rsync" class="headerlink" title="安装 rsync"></a>安装 <code>rsync</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看是否安装rsync</span></span><br><span class="line">$ rpm -qa | grep rsync</span><br><span class="line"><span class="comment"># 安装rsync</span></span><br><span class="line">$ yum install rsync -y</span><br></pre></td></tr></table></figure><h2 id="配置文件-etc-rsyncd-conf"><a href="#配置文件-etc-rsyncd-conf" class="headerlink" title="配置文件 /etc/rsyncd.conf"></a>配置文件 <code>/etc/rsyncd.conf</code></h2><blockquote><p>可以配置 <code>hosts allow</code> 只接受允许的 <code>ip</code> 的同步请求</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">uid = root</span><br><span class="line">gid = root</span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line">max connections = 4</span><br><span class="line"><span class="comment"># 默认为true，修改为no，增加对目录文件软连接的备份</span></span><br><span class="line">use chroot = no</span><br><span class="line"><span class="comment"># 允许进行数据同步的客户端IP地址，可以设置多个，用英文状态下逗号隔开</span></span><br><span class="line"><span class="comment"># hosts allow = 47.52.175.26</span></span><br><span class="line"><span class="comment"># 定义日志存放位置</span></span><br><span class="line"><span class="built_in">log</span> file = /var/<span class="built_in">log</span>/rsyncd.log</span><br><span class="line"><span class="comment"># 忽略无关错误</span></span><br><span class="line">ignore errors = yes</span><br><span class="line"><span class="comment"># 设置rsync服务端文件为读写权限</span></span><br><span class="line"><span class="built_in">read</span> only = no</span><br><span class="line"><span class="comment"># 认证的用户名与系统帐户无关在认证文件做配置，如果没有这行则表明是匿名</span></span><br><span class="line">auth users = rsync</span><br><span class="line"><span class="comment"># 密码认证文件，格式(虚拟用户名:密码）</span></span><br><span class="line">secrets file = /etc/rsync.pass</span><br><span class="line"><span class="comment"># 这里是认证的模块名，在client端需要指定，可以设置多个模块和路径</span></span><br><span class="line">[webroot]</span><br><span class="line"><span class="comment"># 自定义注释</span></span><br><span class="line">comment = webroot</span><br><span class="line"><span class="comment"># 文件存放的路径</span></span><br><span class="line">path = /home/work/orp/webroot</span><br><span class="line"></span><br><span class="line">[static]</span><br><span class="line">comment = static</span><br><span class="line">path = /home/work/orp/static</span><br></pre></td></tr></table></figure><h2 id="密码文件"><a href="#密码文件" class="headerlink" title="密码文件"></a>密码文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="built_in">test</span>:<span class="built_in">test</span> &gt; /etc/rsync.pass</span><br><span class="line"><span class="comment"># 需要注意的是必须把密码文件的权限设为600，否则会报错</span></span><br><span class="line">$ chmod 600 /etc/rsync.pass</span><br></pre></td></tr></table></figure><h2 id="运行-rsync"><a href="#运行-rsync" class="headerlink" title="运行 rsync"></a>运行 <code>rsync</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为rsync默认监听的是873端口，需要用root权限运行</span></span><br><span class="line">$ rsync --daemon</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="主服务器"><a href="#主服务器" class="headerlink" title="主服务器"></a>主服务器</h1><h2 id="安装-rsync-1"><a href="#安装-rsync-1" class="headerlink" title="安装 rsync"></a>安装 <code>rsync</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看是否安装rsync</span></span><br><span class="line">$ rpm -qa | grep rsync</span><br><span class="line"><span class="comment"># 安装rsync</span></span><br><span class="line">$ yum install rsync -y</span><br></pre></td></tr></table></figure><h2 id="解压-sersync"><a href="#解压-sersync" class="headerlink" title="解压 sersync"></a>解压 <code>sersync</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为了方便，已经下好了sersync的安装包，只需解压并移到自己想要的地方即可</span></span><br><span class="line">$ <span class="built_in">cd</span> ~ &amp;&amp; tar -zxvf sersync2.5.4_64bit_binary_stable_final.tar.gz</span><br><span class="line">$ mv GNU-Linux-x86 sersync</span><br><span class="line">$ rm sersync2.5.4_64bit_binary_stable_final.tar.gz</span><br></pre></td></tr></table></figure><h2 id="配置-sersync"><a href="#配置-sersync" class="headerlink" title="配置 sersync"></a>配置 <code>sersync</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建不同的目录区分文件类型，然后创建一个密码文件内容为从服务器的rsync密码，每个模块的xml文件已经写好只需要拷贝到conf文件夹即可</span></span><br><span class="line">$ <span class="built_in">cd</span> /root/sersync &amp;&amp; mkdir bin conf etc logs</span><br><span class="line">$ mv sersync2 bin</span><br><span class="line">$ mv confxml.xml conf</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'test'</span> &gt; etc/user.pass</span><br><span class="line">$ chmod 600 etc/user.pass</span><br></pre></td></tr></table></figure><h2 id="配置文件-xml"><a href="#配置文件-xml" class="headerlink" title="配置文件 *.xml"></a>配置文件 <code>*.xml</code></h2><h3 id="文件夹过滤"><a href="#文件夹过滤" class="headerlink" title="文件夹过滤"></a>文件夹过滤</h3><p>可以设置过滤文件夹(文件)，设置了之后就不会同步该文件夹(文件)，需要注意的是在设置了过滤后启动 <code>sersync</code> 时 <code>-r</code> 参数会失效</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span> <span class="attr">start</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">expression</span>=<span class="string">"^upload/*"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span>s</span><br></pre></td></tr></table></figure><h3 id="设置监听目录和目标-ip-amp-module-name"><a href="#设置监听目录和目标-ip-amp-module-name" class="headerlink" title="设置监听目录和目标 ip &amp; module_name"></a>设置监听目录和目标 <code>ip &amp; module_name</code></h3><p>可以修改监听的本地目录及远程的 <code>ip</code> 和 <code>module_name</code>，如果需要同步到多台从服务器，配置多个 <code>remote</code> 即可，还支持过滤，但是在设置了过滤后启动 <code>sersync</code> 时 <code>-r</code> 参数会失效</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localpath</span> <span class="attr">watch</span>=<span class="string">"/home/work/orp/static/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">remote</span> <span class="attr">ip</span>=<span class="string">"0.0.0.0"</span> <span class="attr">name</span>=<span class="string">"static"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">localpath</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="失败重传"><a href="#失败重传" class="headerlink" title="失败重传"></a>失败重传</h3><p>可以修改失败重传的时间间隔，根据实际需求修改 <code>timeToExecute</code> 属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">failLog</span> <span class="attr">path</span>=<span class="string">"/tmp/rsync_fail_log.sh"</span> <span class="attr">timeToExecute</span>=<span class="string">"60"</span>/&gt;</span><span class="comment">&lt;!-- default every 60mins execute once --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="运行-sersync"><a href="#运行-sersync" class="headerlink" title="运行 sersync"></a>运行 <code>sersync</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># webroot模块</span></span><br><span class="line">$ /root/sersync/bin/sersync2 -r -d -o /root/sersync/conf/webroot.xml &gt; /root/sersync/logs/webroot.log 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="comment"># static模块</span></span><br><span class="line">$ /root/sersync/bin/sersync2 -r -d -o /root/sersync/conf/static.xml &gt; /root/sersync/logs/static.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h2 id="设置过滤需要初始化同步一次"><a href="#设置过滤需要初始化同步一次" class="headerlink" title="设置过滤需要初始化同步一次"></a>设置过滤需要初始化同步一次</h2><p>由于运行 <code>sersync</code> 时每个 <code>webroot</code> 模块都有指定 <code>filter</code> 过滤条件，虽然加上了 <code>-r</code> 参数，但是并不会进行第一次同步，所以需要我们针对每个模块手动的运行一次 <code>sersync</code> 命令同步一次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># webroot模块</span></span><br><span class="line">$ root/sersync/bin/sersync2 -r -o /root/sersync/conf/webroot_full.xml</span><br></pre></td></tr></table></figure><h1 id="cdn-回源问题"><a href="#cdn-回源问题" class="headerlink" title="cdn 回源问题"></a><code>cdn</code> 回源问题</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>因为线上有部分图片使用了百度对象存储提供的缩略服务，即在 url 后加上 <code>@w_*</code>，但是使用缩略服务有一个要求就是对象存储上必须有原图，当我们没有访问 <code>cdn</code> 没有回源的时候对象存储上是没有原图的，所以我们需要先手动的访问一次</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="sersync-开启-command-插件"><a href="#sersync-开启-command-插件" class="headerlink" title="sersync 开启 command 插件"></a><code>sersync</code> 开启 <code>command</code> 插件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sersync</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">start</span>=<span class="string">"true"</span> <span class="attr">name</span>=<span class="string">"command"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sersync</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"command"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">prefix</span>=<span class="string">"/root/sersync/bin/curl.sh"</span> <span class="attr">suffix</span>=<span class="string">""</span> <span class="attr">ignoreError</span>=<span class="string">"true"</span>/&gt;</span><span class="comment">&lt;!--prefix /opt/tongbu/mmm.sh suffix--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="curl-sh"><a href="#curl-sh" class="headerlink" title="curl.sh"></a><code>curl.sh</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">IMAGE_EXTENSIONS=(<span class="string">'gif'</span> <span class="string">'jpg'</span> <span class="string">'png'</span> <span class="string">'jpeg'</span> <span class="string">'bmp'</span> <span class="string">'ico'</span> <span class="string">'svg'</span>);</span><br><span class="line"></span><br><span class="line">sign=0;</span><br><span class="line">absolute_path=<span class="variable">$1</span>;</span><br><span class="line">file_src=<span class="variable">$&#123;absolute_path#*//&#125;</span>;</span><br><span class="line">extension_name=<span class="variable">$&#123;absolute_path##*.&#125;</span>;</span><br><span class="line">lowwer_extension_name=$(<span class="built_in">echo</span> <span class="variable">$extension_name</span> | tr <span class="string">'[A-Z]'</span> <span class="string">'[a-z]'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> extension <span class="keyword">in</span> <span class="variable">$&#123;IMAGE_EXTENSIONS[*]&#125;</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$extension</span> = <span class="variable">$lowwer_extension_name</span> ]; <span class="keyword">then</span></span><br><span class="line">    sign=1</span><br><span class="line">  <span class="keyword">fi</span>;</span><br><span class="line"><span class="keyword">done</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$sign</span> = 1 ]; <span class="keyword">then</span></span><br><span class="line">  curl <span class="string">'your cdn domain/upload/'</span><span class="variable">$file_src</span> &gt; /dev/null;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">'your cdn domain/upload/'</span><span class="variable">$file_src</span> &gt;&gt; /root/sersync/logs/curl.log;</span><br><span class="line"><span class="keyword">fi</span>;</span><br></pre></td></tr></table></figure><h3 id="curl-sh-加上可执行的权限"><a href="#curl-sh-加上可执行的权限" class="headerlink" title="curl.sh 加上可执行的权限"></a><code>curl.sh</code> 加上可执行的权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x /root/sersync/bin/curl.sh</span><br></pre></td></tr></table></figure><h3 id="开启-command-插件监听-upload-目录"><a href="#开启-command-插件监听-upload-目录" class="headerlink" title="开启 command 插件监听 upload 目录"></a>开启 <code>command</code> 插件监听 <code>upload</code> 目录</h3><h4 id="配置文件-static-upload-xml"><a href="#配置文件-static-upload-xml" class="headerlink" title="配置文件 static_upload.xml"></a>配置文件 <code>static_upload.xml</code></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sersync</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">localpath</span> <span class="attr">watch</span>=<span class="string">"/home/work/orp/static/upload/"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">localpath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">start</span>=<span class="string">"true"</span> <span class="attr">name</span>=<span class="string">"command"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sersync</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"command"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">prefix</span>=<span class="string">"/root/sersync/bin/curl.sh"</span> <span class="attr">suffix</span>=<span class="string">""</span> <span class="attr">ignoreError</span>=<span class="string">"true"</span>/&gt;</span><span class="comment">&lt;!--prefix /opt/tongbu/mmm.sh suffix--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">start</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">expression</span>=<span class="string">"(.*)\.php"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">expression</span>=<span class="string">"(.*)\.sh"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="启动-command-插件"><a href="#启动-command-插件" class="headerlink" title="启动 command 插件"></a>启动 <code>command</code> 插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root/sersync/bin/sersync2 -d -o /root/sersync/conf/static_upload.xml -m <span class="built_in">command</span></span><br></pre></td></tr></table></figure><h1 id="从服务器上传文件主服务器无法读取问题"><a href="#从服务器上传文件主服务器无法读取问题" class="headerlink" title="从服务器上传文件主服务器无法读取问题"></a>从服务器上传文件主服务器无法读取问题</h1><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><p>当开启负载均衡的时候，用户上传文件调用接口分发到了备用机时，文件只存在于备用机，因为不是双向同步，这时主服务器上没有该文件，所以访问该文件时负载均衡分发到主服务器会报 404，所以可以针对静态文件使用 NFS 实现网络文件系统，从而备用机访问到主服务器的今天文件</p><h2 id="解决方案-nfs"><a href="#解决方案-nfs" class="headerlink" title="解决方案 nfs"></a>解决方案 <code>nfs</code></h2><h3 id="nfs-工作流程"><a href="#nfs-工作流程" class="headerlink" title="nfs 工作流程"></a><code>nfs</code> 工作流程</h3><ul><li>由程序在 nfs 客户端发起存取文件的请求，客户端本地的 rpc(rpcbind)服务会通过网络向 nfs 服务端的 rpc 的 111 端口发出文件存取功能的请求</li><li>nfs 服务端的 rpc 找到对应已注册的 nfs 端口，通知客户端 rpc 服务</li><li>客户端获取正确的端口，并与 nfs daemon 联机存取数据</li><li>存取数据成功后，返回前端访问程序，完成一次存取操作</li></ul><h3 id="主服务器安装-nfs"><a href="#主服务器安装-nfs" class="headerlink" title="主服务器安装 nfs"></a>主服务器安装 <code>nfs</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看系统是否已安装nfs</span></span><br><span class="line">$ rpm -qa | grep nfs</span><br><span class="line">$ rpm -qa | grep rpcbind</span><br><span class="line"><span class="comment"># 安装nfs</span></span><br><span class="line">$ yum install nfs-utils rpcbind -y</span><br></pre></td></tr></table></figure><h3 id="主服务器配置文件-etc-exports"><a href="#主服务器配置文件-etc-exports" class="headerlink" title="主服务器配置文件 /etc/exports"></a>主服务器配置文件 <code>/etc/exports</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/work/orp/static/upload 172.16.0.0/16(rw,no_root_squash,sync,no_subtree_check)</span><br></pre></td></tr></table></figure><h3 id="重要配置文件参数说明"><a href="#重要配置文件参数说明" class="headerlink" title="重要配置文件参数说明"></a>重要配置文件参数说明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ro：共享目录只读</span><br><span class="line">rw：共享目录可读可写</span><br><span class="line">all_squash：所有访问用户都映射为匿名用户或用户组</span><br><span class="line">no_all_squash（默认）：访问用户先与本机用户匹配，匹配失败后再映射为匿名用户或用户组</span><br><span class="line">root_squash（默认）：将来访的root用户映射为匿名用户或用户组</span><br><span class="line">no_root_squash：来访的root用户保持root帐号权限</span><br><span class="line">anonuid=&lt;UID&gt;：指定匿名访问用户的本地用户UID，默认为nfsnobody（65534）</span><br><span class="line">anongid=&lt;GID&gt;：指定匿名访问用户的本地用户组GID，默认为nfsnobody（65534）</span><br><span class="line">secure（默认）：限制客户端只能从小于1024的tcp/ip端口连接服务器</span><br><span class="line">insecure：允许客户端从大于1024的tcp/ip端口连接服务器</span><br><span class="line">sync：将数据同步写入内存缓冲区与磁盘中，效率低，但可以保证数据的一致性</span><br><span class="line">async：将数据先保存在内存缓冲区中，必要时才写入磁盘</span><br><span class="line">wdelay（默认）：检查是否有相关的写操作，如果有则将这些写操作一起执行，这样可以提高效率</span><br><span class="line">no_wdelay：若有写操作则立即执行，应与sync配合使用</span><br><span class="line">subtree_check（默认） ：若输出目录是一个子目录，则nfs服务器将检查其父目录的权限</span><br><span class="line">no_subtree_check ：即使输出目录是一个子目录，nfs服务器也不检查其父目录的权限，这样可以提高效率</span><br></pre></td></tr></table></figure><h3 id="主服务器启动-nfs，rpcbind-服务"><a href="#主服务器启动-nfs，rpcbind-服务" class="headerlink" title="主服务器启动 nfs，rpcbind 服务"></a>主服务器启动 <code>nfs</code>，<code>rpcbind</code> 服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ service rpcbind start</span><br><span class="line">$ service nfs start</span><br></pre></td></tr></table></figure><h3 id="备用机安装-nfs"><a href="#备用机安装-nfs" class="headerlink" title="备用机安装 nfs"></a>备用机安装 <code>nfs</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看系统是否已安装nfs</span></span><br><span class="line">$ rpm -qa | grep nfs</span><br><span class="line">$ rpm -qa | grep rpcbind</span><br><span class="line"><span class="comment"># 安装nfs</span></span><br><span class="line">$ yum install nfs-utils rpcbind -y</span><br></pre></td></tr></table></figure><h3 id="备用机查看-nfs-共享目录"><a href="#备用机查看-nfs-共享目录" class="headerlink" title="备用机查看 nfs 共享目录"></a>备用机查看 <code>nfs</code> 共享目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ showmount -e 172.16.0.2</span><br><span class="line">Export list <span class="keyword">for</span> 172.16.0.2:</span><br><span class="line">/home/work/orp/static/upload 172.16.0.0/16</span><br></pre></td></tr></table></figure><h3 id="挂载nfs"><a href="#挂载nfs" class="headerlink" title="挂载nfs"></a>挂载<code>nfs</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount 172.16.0.2:/home/work/orp/static/upload /home/work/orp/static/upload</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>使用 <code>docker</code> 的情况下在挂载之后对应的 <code>docker</code> 容器需要重启一次，否则读取不到数据</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;由于一台主服务器压力比较大，需要启用备用机开启负载均衡减轻主服务器的压力，同步主服务器的代码、静态资源到从服务器让从服务器跑起来&lt;/p&gt;
&lt;h1 id=&quot;从服务器&quot;&gt;&lt;a href=&quot;#从服务器&quot; class=&quot;headerlink&quot; title=&quot;从服务器&quot;&gt;&lt;/a&gt;从服务器&lt;/h1&gt;&lt;h2 id=&quot;安装-rsync&quot;&gt;&lt;a href=&quot;#安装-rsync&quot; class=&quot;headerlink&quot; title=&quot;安装 rsync&quot;&gt;&lt;/a&gt;安装 &lt;code&gt;rsync&lt;/code&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看是否安装rsync&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ rpm -qa | grep rsync&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 安装rsync&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ yum install rsync -y&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;配置文件-etc-rsyncd-conf&quot;&gt;&lt;a href=&quot;#配置文件-etc-rsyncd-conf&quot; class=&quot;headerlink&quot; title=&quot;配置文件 /etc/rsyncd.conf&quot;&gt;&lt;/a&gt;配置文件 &lt;code&gt;/etc/rsyncd.conf&lt;/code&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;可以配置 &lt;code&gt;hosts allow&lt;/code&gt; 只接受允许的 &lt;code&gt;ip&lt;/code&gt; 的同步请求&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;uid = root&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gid = root&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 最大连接数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;max connections = 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 默认为true，修改为no，增加对目录文件软连接的备份&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;use chroot = no&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 允许进行数据同步的客户端IP地址，可以设置多个，用英文状态下逗号隔开&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# hosts allow = 47.52.175.26&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 定义日志存放位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; file = /var/&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;/rsyncd.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 忽略无关错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ignore errors = yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 设置rsync服务端文件为读写权限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; only = no&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 认证的用户名与系统帐户无关在认证文件做配置，如果没有这行则表明是匿名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;auth users = rsync&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 密码认证文件，格式(虚拟用户名:密码）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;secrets file = /etc/rsync.pass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 这里是认证的模块名，在client端需要指定，可以设置多个模块和路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[webroot]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 自定义注释&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;comment = webroot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 文件存放的路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;path = /home/work/orp/webroot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[static]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;comment = static&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;path = /home/work/orp/static&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;密码文件&quot;&gt;&lt;a href=&quot;#密码文件&quot; class=&quot;headerlink&quot; title=&quot;密码文件&quot;&gt;&lt;/a&gt;密码文件&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; &amp;gt; /etc/rsync.pass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 需要注意的是必须把密码文件的权限设为600，否则会报错&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ chmod 600 /etc/rsync.pass&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;运行-rsync&quot;&gt;&lt;a href=&quot;#运行-rsync&quot; class=&quot;headerlink&quot; title=&quot;运行 rsync&quot;&gt;&lt;/a&gt;运行 &lt;code&gt;rsync&lt;/code&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 因为rsync默认监听的是873端口，需要用root权限运行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ rsync --daemon&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="CentOS" scheme="https://notes.gethin.cn/tags/CentOS/"/>
    
      <category term="rsync" scheme="https://notes.gethin.cn/tags/rsync/"/>
    
      <category term="sersync" scheme="https://notes.gethin.cn/tags/sersync/"/>
    
      <category term="nfs" scheme="https://notes.gethin.cn/tags/nfs/"/>
    
  </entry>
  
  <entry>
    <title>Shadowsocks-libev 安装笔记</title>
    <link href="https://notes.gethin.cn/2018/01/29/shadowsocks-libev/"/>
    <id>https://notes.gethin.cn/2018/01/29/shadowsocks-libev/</id>
    <published>2018-01-29T23:32:14.000Z</published>
    <updated>2021-05-08T00:54:41.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装-EPEL-源"><a href="#安装-EPEL-源" class="headerlink" title="安装 EPEL 源"></a>安装 EPEL 源</h1><h1 id="什么是企业版-Linux-附加软件包（EPEL）"><a href="#什么是企业版-Linux-附加软件包（EPEL）" class="headerlink" title="什么是企业版 Linux 附加软件包（EPEL）"></a>什么是企业版 Linux 附加软件包（EPEL）</h1><ul><li><p>企业版 Linux 附加软件包（以下简称 EPEL）是一个 Fedora 特别兴趣小组，用以创建、维护以及管理针对企业版 Linux 的一个高质量附加软件包集，面向的对象包括但不限于 红帽企业版 Linux (RHEL)、CentOS、Scientific Linux (SL)、Oracle Linux (OL)</p></li><li><p>EPEL 的软件包通常不会与企业版 Linux 官方源中的软件包发生冲突，或者互相替换文件。EPEL 项目与 Fedora 基本一致，包含完整的构建系统、升级管理器、镜像管理器等等</p></li></ul><h2 id="通过-yum-命令安装-EPEL"><a href="#通过-yum-命令安装-EPEL" class="headerlink" title="通过 yum 命令安装 EPEL"></a>通过 yum 命令安装 EPEL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install epel-release -y</span><br></pre></td></tr></table></figure><h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><h2 id="更新-CentOS-系统"><a href="#更新-CentOS-系统" class="headerlink" title="更新 CentOS 系统"></a>更新 CentOS 系统</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum update -y</span><br></pre></td></tr></table></figure><h2 id="安装-Shadowsocks-libev-依赖"><a href="#安装-Shadowsocks-libev-依赖" class="headerlink" title="安装 Shadowsocks-libev 依赖"></a>安装 <code>Shadowsocks-libev</code> 依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install gcc gettext autoconf libtool automake make pcre-devel asciidoc xmlto c-ares-devel libev-devel libsodium-devel mbedtls-devel -y</span><br></pre></td></tr></table></figure><h1 id="安装并启动-Shadowsocks-libev"><a href="#安装并启动-Shadowsocks-libev" class="headerlink" title="安装并启动 Shadowsocks-libev"></a>安装并启动 <code>Shadowsocks-libev</code></h1><blockquote><p>注：第一次安装 <code>Shadowsocks-libev</code> 的时候是通过 yum 源安装的，不过现在找不到 <code>Shadowsocks-libev</code> 的 yum 源，暂时通过 github 下载源码并启动 <code>Shadowsocks-libev</code></p></blockquote><h2 id="安装-Shadowsocks-libev"><a href="#安装-Shadowsocks-libev" class="headerlink" title="安装 Shadowsocks-libev"></a>安装 <code>Shadowsocks-libev</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 work 用户并修改密码</span></span><br><span class="line">$ useradd work -u 1000</span><br><span class="line">$ <span class="built_in">echo</span> hicoffice | passwd --stdin work</span><br><span class="line">$ su work</span><br><span class="line">$ <span class="built_in">cd</span> /home/work</span><br><span class="line"><span class="comment"># 创建 source 文件夹用于存放源码</span></span><br><span class="line">$ mkdir <span class="built_in">source</span> &amp;&amp; <span class="built_in">cd</span> <span class="built_in">source</span></span><br><span class="line"><span class="comment"># 从 github 上下载源码</span></span><br><span class="line">$ wget https://github.com/shadowsocks/shadowsocks-libev/releases/download/v3.2.3/shadowsocks-libev-3.2.3.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> shadowsocks-libev-3.2.3</span><br><span class="line"><span class="comment"># 开始。安装</span></span><br><span class="line">$ ./configure --prefix=/home/work/orp/shadowsocks-libev</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h2 id="启动-Shadowsocks-libev"><a href="#启动-Shadowsocks-libev" class="headerlink" title="启动 Shadowsocks-libev"></a>启动 Shadowsocks-libev</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启 Shadowsocks-libev，更多参数通过 ss-server --help 查看</span></span><br><span class="line">$ /home/work/orp/shadowsocks-libev/bin/ss-server -s 0.0.0.0 -p 8388 -k password -m rc4-md5 &amp;</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="使用-Supervisor-启动-Shadowsocks-libev"><a href="#使用-Supervisor-启动-Shadowsocks-libev" class="headerlink" title="使用 Supervisor 启动 Shadowsocks-libev"></a>使用 <code>Supervisor</code> 启动 <code>Shadowsocks-libev</code></h1><h2 id="安装-Supervisor"><a href="#安装-Supervisor" class="headerlink" title="安装 Supervisor"></a>安装 <code>Supervisor</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install supervisor</span><br></pre></td></tr></table></figure><h2 id="配置-Supervisor"><a href="#配置-Supervisor" class="headerlink" title="配置 Supervisor"></a>配置 <code>Supervisor</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/work/orp/shadowsocks-libev</span><br><span class="line"><span class="comment"># 创建配置文件和日志存放目录</span></span><br><span class="line">$ mkdir etc logs</span><br><span class="line">$ vim /home/work/orp/shadowsocks-libev/etc/supervisord.conf</span><br></pre></td></tr></table></figure><p>配置文件一览 <code>/home/work/orp/shadowsocks-libev/etc/supervisord.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[program:shadowsocks]</span><br><span class="line"><span class="built_in">command</span> = /home/work/orp/shadowsocks-libev/bin/ss-server -s 0.0.0.0 -p 8388 -k password -m rc4-md5 &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">user = work</span><br><span class="line">autostart = <span class="literal">true</span></span><br><span class="line">autoresart = <span class="literal">true</span></span><br><span class="line">stderr_logfile = /home/work/orp/shadowsocks-libev/logs/ss.stderr.log</span><br><span class="line">stdout_logfile = /home/work/orp/shadowsocks-libev/logs/ss.stdout.log</span><br><span class="line">[supervisord]</span><br></pre></td></tr></table></figure><h2 id="启动-Supervisor"><a href="#启动-Supervisor" class="headerlink" title="启动 Supervisor"></a>启动 <code>Supervisor</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/work/orp/shadowsocks-libev/etc &amp;&amp; supervisord -c /home/work/orp/shadowsocks-libev/etc/supervisord.conf</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装-EPEL-源&quot;&gt;&lt;a href=&quot;#安装-EPEL-源&quot; class=&quot;headerlink&quot; title=&quot;安装 EPEL 源&quot;&gt;&lt;/a&gt;安装 EPEL 源&lt;/h1&gt;&lt;h1 id=&quot;什么是企业版-Linux-附加软件包（EPEL）&quot;&gt;&lt;a href=&quot;#什么是企业版-Linux-附加软件包（EPEL）&quot; class=&quot;headerlink&quot; title=&quot;什么是企业版 Linux 附加软件包（EPEL）&quot;&gt;&lt;/a&gt;什么是企业版 Linux 附加软件包（EPEL）&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;企业版 Linux 附加软件包（以下简称 EPEL）是一个 Fedora 特别兴趣小组，用以创建、维护以及管理针对企业版 Linux 的一个高质量附加软件包集，面向的对象包括但不限于 红帽企业版 Linux (RHEL)、CentOS、Scientific Linux (SL)、Oracle Linux (OL)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;EPEL 的软件包通常不会与企业版 Linux 官方源中的软件包发生冲突，或者互相替换文件。EPEL 项目与 Fedora 基本一致，包含完整的构建系统、升级管理器、镜像管理器等等&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;通过-yum-命令安装-EPEL&quot;&gt;&lt;a href=&quot;#通过-yum-命令安装-EPEL&quot; class=&quot;headerlink&quot; title=&quot;通过 yum 命令安装 EPEL&quot;&gt;&lt;/a&gt;通过 yum 命令安装 EPEL&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ yum install epel-release -y&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a&gt;安装依赖&lt;/h1&gt;&lt;h2 id=&quot;更新-CentOS-系统&quot;&gt;&lt;a href=&quot;#更新-CentOS-系统&quot; class=&quot;headerlink&quot; title=&quot;更新 CentOS 系统&quot;&gt;&lt;/a&gt;更新 CentOS 系统&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ yum update -y&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;安装-Shadowsocks-libev-依赖&quot;&gt;&lt;a href=&quot;#安装-Shadowsocks-libev-依赖&quot; class=&quot;headerlink&quot; title=&quot;安装 Shadowsocks-libev 依赖&quot;&gt;&lt;/a&gt;安装 &lt;code&gt;Shadowsocks-libev&lt;/code&gt; 依赖&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ yum install gcc gettext autoconf libtool automake make pcre-devel asciidoc xmlto c-ares-devel libev-devel libsodium-devel mbedtls-devel -y&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;安装并启动-Shadowsocks-libev&quot;&gt;&lt;a href=&quot;#安装并启动-Shadowsocks-libev&quot; class=&quot;headerlink&quot; title=&quot;安装并启动 Shadowsocks-libev&quot;&gt;&lt;/a&gt;安装并启动 &lt;code&gt;Shadowsocks-libev&lt;/code&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;注：第一次安装 &lt;code&gt;Shadowsocks-libev&lt;/code&gt; 的时候是通过 yum 源安装的，不过现在找不到 &lt;code&gt;Shadowsocks-libev&lt;/code&gt; 的 yum 源，暂时通过 github 下载源码并启动 &lt;code&gt;Shadowsocks-libev&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;安装-Shadowsocks-libev&quot;&gt;&lt;a href=&quot;#安装-Shadowsocks-libev&quot; class=&quot;headerlink&quot; title=&quot;安装 Shadowsocks-libev&quot;&gt;&lt;/a&gt;安装 &lt;code&gt;Shadowsocks-libev&lt;/code&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 创建 work 用户并修改密码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ useradd work -u 1000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; hicoffice | passwd --stdin work&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ su work&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; /home/work&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 创建 source 文件夹用于存放源码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mkdir &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 从 github 上下载源码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ wget https://github.com/shadowsocks/shadowsocks-libev/releases/download/v3.2.3/shadowsocks-libev-3.2.3.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; shadowsocks-libev-3.2.3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 开始。安装&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ./configure --prefix=/home/work/orp/shadowsocks-libev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ make &amp;amp;&amp;amp; make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;启动-Shadowsocks-libev&quot;&gt;&lt;a href=&quot;#启动-Shadowsocks-libev&quot; class=&quot;headerlink&quot; title=&quot;启动 Shadowsocks-libev&quot;&gt;&lt;/a&gt;启动 Shadowsocks-libev&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 开启 Shadowsocks-libev，更多参数通过 ss-server --help 查看&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ /home/work/orp/shadowsocks-libev/bin/ss-server -s 0.0.0.0 -p 8388 -k password -m rc4-md5 &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="CentOS" scheme="https://notes.gethin.cn/tags/CentOS/"/>
    
      <category term="Shadowsocks" scheme="https://notes.gethin.cn/tags/Shadowsocks/"/>
    
      <category term="Shadowsocks-libev" scheme="https://notes.gethin.cn/tags/Shadowsocks-libev/"/>
    
  </entry>
  
</feed>
